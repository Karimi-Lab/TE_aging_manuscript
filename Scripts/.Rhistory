avail_probes <- read.csv("../Data/Methylation/Infinium-HumanMethylation450-BeadChip-array-Probes.csv")
av_pr_df <- rbind(table(avail_probes$Class), table(avail_probes$Family))
View(av_pr_df)
av_pr_df <- cbind(table(avail_probes$Class), table(avail_probes$Family))
View(av_pr_df)
class_df <- as.data.frame(table(avail_probes$Class))
View(class_df)
fam_df <- as.data.frame(table(avail_probes$Family))
avail_df <- rbind(class_df, fam_df)
View(avail_df)
library(readxl)
avail_probes <- read.csv("../Data/Methylation/Infinium-HumanMethylation450-BeadChip-array-Probes.csv")
for (methyl.cohort in c("GSE56046", "GSE40279", "E-MTAB-7309", "GSE56105")){
gse <- readRDS(paste0("../Data/Methylation/", methyl.cohort, "_Methylation_TE_Final.rds"))
exprs_df <- as.data.frame(gse)
# Remove NA rows
exprs_df <- na.omit(exprs_df)
avail_probes[,methyl.cohort] <- unlist(lapply(avail_probes$TE_Identity,
FUN = function(x){ifelse(x %in% rownames(exprs_df), 1,0)}))
}
pr_class <- as.data.frame(lapply(colnames(avail_probes)[7:10],
FUN = function(x){aggregate(avail_probes[,x],
by = list(Class = avail_probes$Class), FUN = sum)}))
pr_class <- pr_class[,-(grep("Class",colnames(pr_class))[-1])]
colnames(pr_class) <- c("Class", colnames(avail_probes)[7:10])
pr_class$Available <- as.numeric(table(avail_probes$Class))
pr_family <- as.data.frame(lapply(colnames(avail_probes)[7:10],
FUN = function(x){aggregate(avail_probes[,x],
by = list(Family = avail_probes$Family), FUN = sum)}))
pr_family <- pr_family[,-(grep("Family",colnames(pr_family))[-1])]
colnames(pr_family) <- c("Family", colnames(avail_probes)[7:10])
pr_family$Available <- as.numeric(table(avail_probes$Family))
# Remove ? rows
pr_class <- pr_class[!grepl("\\?",pr_class$Class),]
pr_family <- pr_family[!grepl("\\?",pr_family$Family),]
OUTPUT <- openxlsx::createWorkbook()
openxlsx::addWorksheet(OUTPUT, "Class Probes")
openxlsx::writeData(OUTPUT, sheet = "Class Probes", x = pr_class, rowNames = F)
openxlsx::addWorksheet(OUTPUT, "Family Probes")
openxlsx::writeData(OUTPUT, sheet = "Family Probes", x = pr_family, rowNames = F)
openxlsx::saveWorkbook(OUTPUT, paste0("../Results/methylation_avail_probes_", format(Sys.Date(), "%y%m%d"),".xlsx"),
overwrite = T)
##### Plot #####
class_probes <- read_excel(paste0("../Results/methylation_avail_probes_", format(Sys.Date(), "%y%m%d"),".xlsx"),
sheet = "Class Probes")
class_probes <- class_probes %>%
dplyr::filter(Class %in% c("LTR", "LINE", "SINE")) %>%
dplyr::select(c("Class", "Available", "GSE56046", "GSE40279", "E-MTAB-7309", "GSE56105"))
class_probes_long <- tidyr::pivot_longer(class_probes, cols = c("Available", "GSE56046", "GSE40279", "E-MTAB-7309", "GSE56105"))
class_probes_long$Class <- factor(class_probes_long$Class, levels=c("LTR", "LINE", "SINE"))
class_probes_long$name <- factor(class_probes_long$name, levels=c("Available", "GSE56046", "GSE40279", "E-MTAB-7309", "GSE56105"))
family_probes <- read_excel(paste0("../Results/methylation_avail_probes_", format(Sys.Date(), "%y%m%d"),".xlsx"),
sheet = "Family Probes")
family_probes <- family_probes %>%
dplyr::filter(Family %in% c("L1", "L2", "ERV1", "ERVL", "ERVL-MaLR","ERVK", "Alu", "MIR")) %>%
dplyr::select(c("Family", "Available", "GSE56046", "GSE40279", "E-MTAB-7309", "GSE56105"))
family_probes_long <- tidyr::pivot_longer(family_probes, cols = c("Available", "GSE56046", "GSE40279", "E-MTAB-7309", "GSE56105"))
family_probes_long$Family <- factor(family_probes_long$Family, levels=c("L1", "L2", "ERV1", "ERVL",
"ERVL-MaLR","ERVK", "Alu", "MIR"))
colnames(family_probes_long)[1] <- "Class"
# Merge class and family
merged_bar_long <- rbind(class_probes_long, family_probes_long)
pdf(file = paste0("../Figures/images/methyl_bar_avail.pdf"),
width = 160*0.0394,
height = 40*0.0394)
library(readxl)
avail_probes <- read.csv("../Data/Methylation/Infinium-HumanMethylation450-BeadChip-array-Probes.csv")
for (methyl.cohort in c("GSE56046", "GSE40279", "E-MTAB-7309", "GSE56105")){
gse <- readRDS(paste0("../Data/Methylation/", methyl.cohort, "_Methylation_TE_Final.rds"))
exprs_df <- as.data.frame(gse)
# Remove NA rows
exprs_df <- na.omit(exprs_df)
avail_probes[,methyl.cohort] <- unlist(lapply(avail_probes$TE_Identity,
FUN = function(x){ifelse(x %in% rownames(exprs_df), 1,0)}))
}
pr_class <- as.data.frame(lapply(colnames(avail_probes)[7:10],
FUN = function(x){aggregate(avail_probes[,x],
by = list(Class = avail_probes$Class), FUN = sum)}))
pr_class <- pr_class[,-(grep("Class",colnames(pr_class))[-1])]
colnames(pr_class) <- c("Class", colnames(avail_probes)[7:10])
pr_class$Available <- as.numeric(table(avail_probes$Class))
pr_family <- as.data.frame(lapply(colnames(avail_probes)[7:10],
FUN = function(x){aggregate(avail_probes[,x],
by = list(Family = avail_probes$Family), FUN = sum)}))
pr_family <- pr_family[,-(grep("Family",colnames(pr_family))[-1])]
colnames(pr_family) <- c("Family", colnames(avail_probes)[7:10])
pr_family$Available <- as.numeric(table(avail_probes$Family))
# Remove ? rows
pr_class <- pr_class[!grepl("\\?",pr_class$Class),]
pr_family <- pr_family[!grepl("\\?",pr_family$Family),]
OUTPUT <- openxlsx::createWorkbook()
openxlsx::addWorksheet(OUTPUT, "Class Probes")
openxlsx::writeData(OUTPUT, sheet = "Class Probes", x = pr_class, rowNames = F)
openxlsx::addWorksheet(OUTPUT, "Family Probes")
openxlsx::writeData(OUTPUT, sheet = "Family Probes", x = pr_family, rowNames = F)
openxlsx::saveWorkbook(OUTPUT, paste0("../Results/methylation_avail_probes_", format(Sys.Date(), "%y%m%d"),".xlsx"),
overwrite = T)
##### Plot #####
class_probes <- read_excel(paste0("../Results/methylation_avail_probes_", format(Sys.Date(), "%y%m%d"),".xlsx"),
sheet = "Class Probes")
class_probes <- class_probes %>%
dplyr::filter(Class %in% c("LTR", "LINE", "SINE")) %>%
dplyr::select(c("Class", "Available", "GSE56046", "GSE40279", "E-MTAB-7309", "GSE56105"))
class_probes_long <- tidyr::pivot_longer(class_probes, cols = c("Available", "GSE56046", "GSE40279", "E-MTAB-7309", "GSE56105"))
class_probes_long$Class <- factor(class_probes_long$Class, levels=c("LTR", "LINE", "SINE"))
class_probes_long$name <- factor(class_probes_long$name, levels=c("Available", "GSE56046", "GSE40279", "E-MTAB-7309", "GSE56105"))
family_probes <- read_excel(paste0("../Results/methylation_avail_probes_", format(Sys.Date(), "%y%m%d"),".xlsx"),
sheet = "Family Probes")
family_probes <- family_probes %>%
dplyr::filter(Family %in% c("L1", "L2", "ERV1", "ERVL", "ERVL-MaLR","ERVK", "Alu", "MIR")) %>%
dplyr::select(c("Family", "Available", "GSE56046", "GSE40279", "E-MTAB-7309", "GSE56105"))
family_probes_long <- tidyr::pivot_longer(family_probes, cols = c("Available", "GSE56046", "GSE40279", "E-MTAB-7309", "GSE56105"))
family_probes_long$Family <- factor(family_probes_long$Family, levels=c("L1", "L2", "ERV1", "ERVL",
"ERVL-MaLR","ERVK", "Alu", "MIR"))
colnames(family_probes_long)[1] <- "Class"
# Merge class and family
merged_bar_long <- rbind(class_probes_long, family_probes_long)
pdf(file = paste0("../Figures/images/methyl_bar_avail.pdf"),
width = 160*0.0394,
height = 40*0.0394)
g <- ggplot(data = merged_bar_long, aes(x = Class, y = value, fill = name)) +
geom_bar(position = "dodge" , stat = "identity") +
theme_pubr() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(size = 7, family = "Helvetica"),
legend.position = "none") +
scale_fill_manual(values = c("Available" = "#20854E", "GSE56046" = "#00A087", "GSE40279" = "#4CBBD5",
"E-MTAB-7309" = "#3C5488", "GSE56105" = "#E64B35"))
print(g)
dev.off()
View(raw_counts)
View(exprs_df)
kch_pats_df <- read.csv("~/Downloads/CHIP-Baseline.csv")
View(kch_pats_df)
kch_pats_df$study_id2 <- toupper(kch_pats_df$study_id2)
setdiff(kch_pats_df$Study.ID, kch_pats_df$study_id2)
setdiff(kch_pats_df$study_id2, kch_pats_df$Study.ID)
library(ggplot2)
library(ggridges)
library(tidyr)
library(dplyr)
library(wesanderson)
library(ggsci)
library(ArchR)
library(forcats)
library(Hmisc)
library(vcd)
library(ggpubr)
library(corrplot)
library(ggrepel)
library(finalfit)
`%notin%` <- Negate(`%in%`)
rc <- read.csv('../Data/CHIP_DATA_LABELS_2023-11-28_1526.csv', check.names = F)
selected_cols_df <- read.csv('../Data/CHIP_variable_selection.csv', check.names = F)
# Fix two column names for data
colnames(rc)[255] <- "Date of data entry"
colnames(rc)[which(colnames(rc) == "Sample 1 CH variant 1: gene name:")] <- "CH variant 1: gene name:"
# Add repeat instance to event name information
rc$`Event Name` <- ifelse(!is.na(rc$`Repeat Instance`),
paste(rc$`Event Name`, rc$`Repeat Instance`, sep = " "),
rc$`Event Name`)
# Remove trailing whitespaces from colnames
colnames(rc) <- make.unique(colnames(rc))
colnames(selected_cols_df) <- make.unique(colnames(selected_cols_df))
selected_cols <- colnames(selected_cols_df)[selected_cols_df[2,] != "X"]
selected_cols <- selected_cols[!is.na(selected_cols)]
selected_cols <- selected_cols[selected_cols != ""]
colnames(rc) <- trimws(colnames(rc))
selected_cols <- trimws(selected_cols)
View(rc)
selected_cols_df
rc <- rc %>%
dplyr::select(selected_cols)
colnames(rc)[which(colnames(rc) == "Unique study number:")] <- "ID"
rc$ID <- toupper(rc$ID)
# Simplify Cohort column
colnames(rc)[which(colnames(rc) == "Patient Cohort:")] <- "Cohort"
rc$Cohort <- plyr::mapvalues(rc$Cohort,
from = c("Pilot study", "Cohort 1 (Orthopaedic)",
"Cohort 2 (Cardiac)", "Cohort 3 (Myeloid Disorders)",
"Cohort 3a (Myeloid Disorders)", "Cohort 4 (Non-Myeloid)"),
to = c("Pilot", "Cohort 1", "Cohort 2", "Cohort 3", "Cohort 3", "Cohort 4"))
# Filter out patients without Cohort information
tmp <- cbind(rc$`ID:`,rc$ID)
tmp <- as.data.frame(cbind(rc$`ID:`,rc$ID))
tmp <- tmp[!duplicated(tmp),]
tmp <- tmp[!duplicated(tmp$V1),]
tmp <- tmp[tmp$V2 != "",]
tmp_ids <- tmp$V1
rc <- rc[rc$`ID:` %in% tmp_ids,]
# Add cohort and ID information to other visits
screen_cohort <- as.data.frame(cbind("ID"=rc$`ID:`[rc$`ID` != ""],
"Cohort"=rc$Cohort[rc$`ID` != ""],
"HosID"=rc$ID[rc$`ID` != ""]))
rc$Cohort <- unlist(lapply(screen_cohort$ID,
FUN = function(x){rep(screen_cohort$Cohort[screen_cohort$ID==x],
length(rc$`ID:`[rc$`ID:` == x]))}))
rc$ID <- unlist(lapply(screen_cohort$HosID,
FUN = function(x){rep(screen_cohort$HosID[screen_cohort$HosID==x],
length(rc$`ID:`[rc$`ID:` == screen_cohort$ID[screen_cohort$HosID == x]]))}))
# Merge unknown ethnicity groups together
rc$`Ethnic origin:`[rc$`Ethnic origin:` == "Not done"] <- "Unknown"
rc$`Ethnic origin:`[rc$`Ethnic origin:` == "Not available"] <- "Unknown"
# Fix Antibody column
rc$Autoantibodies[rc$Autoantibodies == "<b>Negative</b>"] <- "Negative"
rc$Autoantibodies[rc$Autoantibodies == "<b>Positive</b>"] <- "Positive"
# Fix rheumatoid factor column
rc$`Rheumatoid factor` <- gsub("<", "", rc$`Rheumatoid factor`)
rc$`Rheumatoid factor` <- gsub("na", NA, rc$`Rheumatoid factor`)
# Fix DNA ds antibodies column
rc$`DNA double stranded antibodies g/l` <- gsub("<", "", rc$`DNA double stranded antibodies g/l`)
rc$`DNA double stranded antibodies g/l` <- gsub("na", NA, rc$`DNA double stranded antibodies g/l`)
# Fix CRP column
rc$`CRP (mg/L)` <- gsub("<1", "1", rc$`CRP (mg/L)`)
# Replace NDs with NAs
rc[rc == "ND"] <- NA
# Remove the patients that don't have Additional Forms or Baseline ("465-451" "468-7")
add_missing <- setdiff(rc[rc$`Event Name` == "Screening Visit",]$`ID:`,
rc[rc$`Event Name` == "Additional Forms",]$`ID:`)
add_missing_base <- setdiff(rc[rc$`Event Name` == "Screening Visit",]$`ID:`,
rc[rc$`Event Name` == "Baseline Visit",]$`ID:`)
missing_diff <- setdiff(add_missing_base, add_missing)
add_missing <- c(add_missing, missing_diff)
cont <- rc[!(rc$`ID:` %in% add_missing),]
# cont <- subset(cont, select=which(!duplicated(names(cont))))
cont$Hypertension <- ifelse(cont$`Systolic: blood pressure:` >= 140 & cont$`Diastolic blood pressure:` >= 90, "Yes", "No")
cont$Anemia <- ifelse(cont$Sex == "Female",
ifelse(as.double(cont$`Hb (g/L)`) >= 110, "Normal", "Anemia"),
ifelse(as.double(cont$`Hb (g/L)`) >= 120, "Normal", "Anemia"))
cont$Thrombocytopenia <- ifelse(as.double(cont$`Platelet Count PLT (x109/L)`) >= 150, "Normal", "Thrombocytopenia")
cont$Neutropenia <- ifelse(as.double(cont$`Neutrophils (x109/L)`) >= 1.5, "Normal", "Neuropenia")
cont$Leukopenia <- ifelse(as.double(cont$`WBC (x109/L)`) >= 3, "Normal", "Leukopenia")
cont$`Macrocytic Anemia` <- ifelse(as.double(cont$`MCV (fL)`) >= 100, "Macrocytic anemia", "Normal")
cont$Lymphopenia <- ifelse(as.double(cont$`Lymphocytes (x109/L)`) >= 1, "Normal", "Lymphopenia")
cont$Monocytosis <- ifelse(as.double(cont$`Monocytes (x109/L)`) >= 1, "Monocytosis", "Normal")
cont$Cytopenia <- ifelse(cont$Anemia != "Normal" | cont$Thrombocytopenia != "Normal" | cont$Neutropenia != "Normal" | cont$Leukopenia != "Normal",
"Cytopenia", "No cytopenia")
cont$Pancytopenia <- ifelse(cont$Anemia != "Normal" & cont$Thrombocytopenia != "Normal" & cont$Neutropenia != "Normal" & cont$Leukopenia != "Normal",
"Pancytopenia", "No pancytopenia")
cont$BMI <- cont$`Weight (kg)` / (cont$`Height (cm)`/100 * cont$`Height (cm)`/100)
cont <- cont %>%
relocate(BMI, .after = `Weight (kg)`)
View(rc)
selected_cols
selected_cols <- c(selected_cols, "Date of follow up visit or phone call: ")
`%notin%` <- Negate(`%in%`)
#####
rc <- read.csv('../Data/CHIP_DATA_LABELS_2023-11-28_1526.csv', check.names = F)
selected_cols_df <- read.csv('../Data/CHIP_variable_selection.csv', check.names = F)
# Fix two column names for data
colnames(rc)[255] <- "Date of data entry"
colnames(rc)[which(colnames(rc) == "Sample 1 CH variant 1: gene name:")] <- "CH variant 1: gene name:"
# Add repeat instance to event name information
rc$`Event Name` <- ifelse(!is.na(rc$`Repeat Instance`),
paste(rc$`Event Name`, rc$`Repeat Instance`, sep = " "),
rc$`Event Name`)
# Remove trailing whitespaces from colnames
colnames(rc) <- make.unique(colnames(rc))
colnames(selected_cols_df) <- make.unique(colnames(selected_cols_df))
selected_cols <- colnames(selected_cols_df)[selected_cols_df[2,] != "X"]
selected_cols <- selected_cols[!is.na(selected_cols)]
selected_cols <- selected_cols[selected_cols != ""]
colnames(rc) <- trimws(colnames(rc))
selected_cols <- trimws(selected_cols)
# setdiff(selected_cols, colnames(rc))
selected_cols <- c(selected_cols, "Date of follow up visit or phone call: ")
rc <- rc %>%
dplyr::select(selected_cols)
selected_cols <- c(selected_cols, "Date of follow up visit or phone call:")
`%notin%` <- Negate(`%in%`)
#####
rc <- read.csv('../Data/CHIP_DATA_LABELS_2023-11-28_1526.csv', check.names = F)
selected_cols_df <- read.csv('../Data/CHIP_variable_selection.csv', check.names = F)
# Fix two column names for data
colnames(rc)[255] <- "Date of data entry"
colnames(rc)[which(colnames(rc) == "Sample 1 CH variant 1: gene name:")] <- "CH variant 1: gene name:"
# Add repeat instance to event name information
rc$`Event Name` <- ifelse(!is.na(rc$`Repeat Instance`),
paste(rc$`Event Name`, rc$`Repeat Instance`, sep = " "),
rc$`Event Name`)
# Remove trailing whitespaces from colnames
colnames(rc) <- make.unique(colnames(rc))
colnames(selected_cols_df) <- make.unique(colnames(selected_cols_df))
selected_cols <- colnames(selected_cols_df)[selected_cols_df[2,] != "X"]
selected_cols <- selected_cols[!is.na(selected_cols)]
selected_cols <- selected_cols[selected_cols != ""]
colnames(rc) <- trimws(colnames(rc))
selected_cols <- trimws(selected_cols)
# setdiff(selected_cols, colnames(rc))
selected_cols <- c(selected_cols, "Date of follow up visit or phone call:")
rc <- rc %>%
dplyr::select(selected_cols)
colnames(rc)[which(colnames(rc) == "Unique study number:")] <- "ID"
rc$ID <- toupper(rc$ID)
# Simplify Cohort column
colnames(rc)[which(colnames(rc) == "Patient Cohort:")] <- "Cohort"
rc$Cohort <- plyr::mapvalues(rc$Cohort,
from = c("Pilot study", "Cohort 1 (Orthopaedic)",
"Cohort 2 (Cardiac)", "Cohort 3 (Myeloid Disorders)",
"Cohort 3a (Myeloid Disorders)", "Cohort 4 (Non-Myeloid)"),
to = c("Pilot", "Cohort 1", "Cohort 2", "Cohort 3", "Cohort 3", "Cohort 4"))
# Filter out patients without Cohort information
tmp <- cbind(rc$`ID:`,rc$ID)
tmp <- as.data.frame(cbind(rc$`ID:`,rc$ID))
tmp <- tmp[!duplicated(tmp),]
tmp <- tmp[!duplicated(tmp$V1),]
tmp <- tmp[tmp$V2 != "",]
tmp_ids <- tmp$V1
rc <- rc[rc$`ID:` %in% tmp_ids,]
# Add cohort and ID information to other visits
screen_cohort <- as.data.frame(cbind("ID"=rc$`ID:`[rc$`ID` != ""],
"Cohort"=rc$Cohort[rc$`ID` != ""],
"HosID"=rc$ID[rc$`ID` != ""]))
rc$Cohort <- unlist(lapply(screen_cohort$ID,
FUN = function(x){rep(screen_cohort$Cohort[screen_cohort$ID==x],
length(rc$`ID:`[rc$`ID:` == x]))}))
rc$ID <- unlist(lapply(screen_cohort$HosID,
FUN = function(x){rep(screen_cohort$HosID[screen_cohort$HosID==x],
length(rc$`ID:`[rc$`ID:` == screen_cohort$ID[screen_cohort$HosID == x]]))}))
# Merge unknown ethnicity groups together
rc$`Ethnic origin:`[rc$`Ethnic origin:` == "Not done"] <- "Unknown"
rc$`Ethnic origin:`[rc$`Ethnic origin:` == "Not available"] <- "Unknown"
# Fix Antibody column
rc$Autoantibodies[rc$Autoantibodies == "<b>Negative</b>"] <- "Negative"
rc$Autoantibodies[rc$Autoantibodies == "<b>Positive</b>"] <- "Positive"
# Fix rheumatoid factor column
rc$`Rheumatoid factor` <- gsub("<", "", rc$`Rheumatoid factor`)
rc$`Rheumatoid factor` <- gsub("na", NA, rc$`Rheumatoid factor`)
# Fix DNA ds antibodies column
rc$`DNA double stranded antibodies g/l` <- gsub("<", "", rc$`DNA double stranded antibodies g/l`)
rc$`DNA double stranded antibodies g/l` <- gsub("na", NA, rc$`DNA double stranded antibodies g/l`)
# Fix CRP column
rc$`CRP (mg/L)` <- gsub("<1", "1", rc$`CRP (mg/L)`)
# Replace NDs with NAs
rc[rc == "ND"] <- NA
# Remove the patients that don't have Additional Forms or Baseline ("465-451" "468-7")
add_missing <- setdiff(rc[rc$`Event Name` == "Screening Visit",]$`ID:`,
rc[rc$`Event Name` == "Additional Forms",]$`ID:`)
add_missing_base <- setdiff(rc[rc$`Event Name` == "Screening Visit",]$`ID:`,
rc[rc$`Event Name` == "Baseline Visit",]$`ID:`)
missing_diff <- setdiff(add_missing_base, add_missing)
add_missing <- c(add_missing, missing_diff)
cont <- rc[!(rc$`ID:` %in% add_missing),]
# cont <- subset(cont, select=which(!duplicated(names(cont))))
cont$Hypertension <- ifelse(cont$`Systolic: blood pressure:` >= 140 & cont$`Diastolic blood pressure:` >= 90, "Yes", "No")
cont$Anemia <- ifelse(cont$Sex == "Female",
ifelse(as.double(cont$`Hb (g/L)`) >= 110, "Normal", "Anemia"),
ifelse(as.double(cont$`Hb (g/L)`) >= 120, "Normal", "Anemia"))
cont$Thrombocytopenia <- ifelse(as.double(cont$`Platelet Count PLT (x109/L)`) >= 150, "Normal", "Thrombocytopenia")
cont$Neutropenia <- ifelse(as.double(cont$`Neutrophils (x109/L)`) >= 1.5, "Normal", "Neuropenia")
cont$Leukopenia <- ifelse(as.double(cont$`WBC (x109/L)`) >= 3, "Normal", "Leukopenia")
cont$`Macrocytic Anemia` <- ifelse(as.double(cont$`MCV (fL)`) >= 100, "Macrocytic anemia", "Normal")
cont$Lymphopenia <- ifelse(as.double(cont$`Lymphocytes (x109/L)`) >= 1, "Normal", "Lymphopenia")
cont$Monocytosis <- ifelse(as.double(cont$`Monocytes (x109/L)`) >= 1, "Monocytosis", "Normal")
cont$Cytopenia <- ifelse(cont$Anemia != "Normal" | cont$Thrombocytopenia != "Normal" | cont$Neutropenia != "Normal" | cont$Leukopenia != "Normal",
"Cytopenia", "No cytopenia")
cont$Pancytopenia <- ifelse(cont$Anemia != "Normal" & cont$Thrombocytopenia != "Normal" & cont$Neutropenia != "Normal" & cont$Leukopenia != "Normal",
"Pancytopenia", "No pancytopenia")
cont$BMI <- cont$`Weight (kg)` / (cont$`Height (cm)`/100 * cont$`Height (cm)`/100)
cont <- cont %>%
relocate(BMI, .after = `Weight (kg)`)
View(cont)
write.table(cont, file = "~/Desktop/231128_cont.csv", sep = ",", quote = F, row.names = F)
laarni <- read.csv("~/Downloads/CHIP-Baseline.csv")
View(laarni)
cont <- read.csv("~/Desktop/231128_cont.csv")
`%notin%` <- Negate(`%in%`)
#####
rc <- read.csv('../Data/CHIP_DATA_LABELS_2023-11-28_1526.csv', check.names = F)
selected_cols_df <- read.csv('../Data/CHIP_variable_selection.csv', check.names = F)
# Fix two column names for data
colnames(rc)[255] <- "Date of data entry"
colnames(rc)[which(colnames(rc) == "Sample 1 CH variant 1: gene name:")] <- "CH variant 1: gene name:"
# Add repeat instance to event name information
rc$`Event Name` <- ifelse(!is.na(rc$`Repeat Instance`),
paste(rc$`Event Name`, rc$`Repeat Instance`, sep = " "),
rc$`Event Name`)
# Remove trailing whitespaces from colnames
colnames(rc) <- make.unique(colnames(rc))
colnames(selected_cols_df) <- make.unique(colnames(selected_cols_df))
selected_cols <- colnames(selected_cols_df)[selected_cols_df[2,] != "X"]
selected_cols <- selected_cols[!is.na(selected_cols)]
selected_cols <- selected_cols[selected_cols != ""]
colnames(rc) <- trimws(colnames(rc))
selected_cols <- trimws(selected_cols)
# setdiff(selected_cols, colnames(rc))
selected_cols <- c(selected_cols, "Date of follow up visit or phone call:")
rc <- rc %>%
dplyr::select(selected_cols)
colnames(rc)[which(colnames(rc) == "Unique study number:")] <- "ID"
rc$ID <- toupper(rc$ID)
# Simplify Cohort column
colnames(rc)[which(colnames(rc) == "Patient Cohort:")] <- "Cohort"
rc$Cohort <- plyr::mapvalues(rc$Cohort,
from = c("Pilot study", "Cohort 1 (Orthopaedic)",
"Cohort 2 (Cardiac)", "Cohort 3 (Myeloid Disorders)",
"Cohort 3a (Myeloid Disorders)", "Cohort 4 (Non-Myeloid)"),
to = c("Pilot", "Cohort 1", "Cohort 2", "Cohort 3", "Cohort 3", "Cohort 4"))
# Filter out patients without Cohort information
tmp <- cbind(rc$`ID:`,rc$ID)
tmp <- as.data.frame(cbind(rc$`ID:`,rc$ID))
tmp <- tmp[!duplicated(tmp),]
tmp <- tmp[!duplicated(tmp$V1),]
tmp <- tmp[tmp$V2 != "",]
tmp_ids <- tmp$V1
rc <- rc[rc$`ID:` %in% tmp_ids,]
# Add cohort and ID information to other visits
screen_cohort <- as.data.frame(cbind("ID"=rc$`ID:`[rc$`ID` != ""],
"Cohort"=rc$Cohort[rc$`ID` != ""],
"HosID"=rc$ID[rc$`ID` != ""]))
rc$Cohort <- unlist(lapply(screen_cohort$ID,
FUN = function(x){rep(screen_cohort$Cohort[screen_cohort$ID==x],
length(rc$`ID:`[rc$`ID:` == x]))}))
rc$ID <- unlist(lapply(screen_cohort$HosID,
FUN = function(x){rep(screen_cohort$HosID[screen_cohort$HosID==x],
length(rc$`ID:`[rc$`ID:` == screen_cohort$ID[screen_cohort$HosID == x]]))}))
# Merge unknown ethnicity groups together
rc$`Ethnic origin:`[rc$`Ethnic origin:` == "Not done"] <- "Unknown"
rc$`Ethnic origin:`[rc$`Ethnic origin:` == "Not available"] <- "Unknown"
# Fix Antibody column
rc$Autoantibodies[rc$Autoantibodies == "<b>Negative</b>"] <- "Negative"
rc$Autoantibodies[rc$Autoantibodies == "<b>Positive</b>"] <- "Positive"
# Fix rheumatoid factor column
rc$`Rheumatoid factor` <- gsub("<", "", rc$`Rheumatoid factor`)
rc$`Rheumatoid factor` <- gsub("na", NA, rc$`Rheumatoid factor`)
# Fix DNA ds antibodies column
rc$`DNA double stranded antibodies g/l` <- gsub("<", "", rc$`DNA double stranded antibodies g/l`)
rc$`DNA double stranded antibodies g/l` <- gsub("na", NA, rc$`DNA double stranded antibodies g/l`)
# Fix CRP column
rc$`CRP (mg/L)` <- gsub("<1", "1", rc$`CRP (mg/L)`)
# Replace NDs with NAs
rc[rc == "ND"] <- NA
# Remove the patients that don't have Additional Forms or Baseline ("465-451" "468-7")
add_missing <- setdiff(rc[rc$`Event Name` == "Screening Visit",]$`ID:`,
rc[rc$`Event Name` == "Additional Forms",]$`ID:`)
add_missing_base <- setdiff(rc[rc$`Event Name` == "Screening Visit",]$`ID:`,
rc[rc$`Event Name` == "Baseline Visit",]$`ID:`)
missing_diff <- setdiff(add_missing_base, add_missing)
add_missing <- c(add_missing, missing_diff)
cont <- rc[!(rc$`ID:` %in% add_missing),]
# cont <- subset(cont, select=which(!duplicated(names(cont))))
cont$Hypertension <- ifelse(cont$`Systolic: blood pressure:` >= 140 & cont$`Diastolic blood pressure:` >= 90, "Yes", "No")
cont$Anemia <- ifelse(cont$Sex == "Female",
ifelse(as.double(cont$`Hb (g/L)`) >= 110, "Normal", "Anemia"),
ifelse(as.double(cont$`Hb (g/L)`) >= 120, "Normal", "Anemia"))
cont$Thrombocytopenia <- ifelse(as.double(cont$`Platelet Count PLT (x109/L)`) >= 150, "Normal", "Thrombocytopenia")
cont$Neutropenia <- ifelse(as.double(cont$`Neutrophils (x109/L)`) >= 1.5, "Normal", "Neuropenia")
cont$Leukopenia <- ifelse(as.double(cont$`WBC (x109/L)`) >= 3, "Normal", "Leukopenia")
cont$`Macrocytic Anemia` <- ifelse(as.double(cont$`MCV (fL)`) >= 100, "Macrocytic anemia", "Normal")
cont$Lymphopenia <- ifelse(as.double(cont$`Lymphocytes (x109/L)`) >= 1, "Normal", "Lymphopenia")
cont$Monocytosis <- ifelse(as.double(cont$`Monocytes (x109/L)`) >= 1, "Monocytosis", "Normal")
cont$Cytopenia <- ifelse(cont$Anemia != "Normal" | cont$Thrombocytopenia != "Normal" | cont$Neutropenia != "Normal" | cont$Leukopenia != "Normal",
"Cytopenia", "No cytopenia")
cont$Pancytopenia <- ifelse(cont$Anemia != "Normal" & cont$Thrombocytopenia != "Normal" & cont$Neutropenia != "Normal" & cont$Leukopenia != "Normal",
"Pancytopenia", "No pancytopenia")
cont$BMI <- cont$`Weight (kg)` / (cont$`Height (cm)`/100 * cont$`Height (cm)`/100)
cont <- cont %>%
relocate(BMI, .after = `Weight (kg)`)
for (id in laarni$Study.ID){
print(id)
}
ids <- laarni$Study.ID[laarni$Study.ID != ""]
ids <- laarni$Study.ID[laarni$Study.ID != ""]
id <- "KCH0001"
tmp_fup <- cont[cont$ID == id, cont$`Date of follow up visit or phone call:`]
View(cont[cont$ID == id,])
tmp_fup <- cont[cont$ID == id, `Date of follow up visit or phone call:`]
tmp_fup <- cont[cont$ID == id, "Date of follow up visit or phone call:"]
tmp_fup
tmp_fup <- tmp_fup[tmp_fup != ""]
tmp_fup
last_fup <- cont$`Event Name`[cont$ID == id & cont$`Date of follow up visit or phone call:` == tmp_fup]
last_fup <- cont[(cont$ID == id) & (cont$`Date of follow up visit or phone call:` == tmp_fup)]
last_fup <- cont[cont$ID == id & cont$`Date of follow up visit or phone call:` == tmp_fup,]
tmp_fup[-1]
tmp_fup[length(tmp_fup)]
tmp_fup <- tmp_fup[length(tmp_fup)]
last_fup <- cont[cont$ID == id & cont$`Date of follow up visit or phone call:` == tmp_fup,]
last_fup$`Event Name`
df <- data.frame()
ids <- laarni$Study.ID[laarni$Study.ID != ""]
df <- data.frame()
for (id in ids){
tmp_fup <- cont[cont$ID == id, "Date of follow up visit or phone call:"]
tmp_fup <- tmp_fup[tmp_fup != ""]
tmp_fup <- tmp_fup[length(tmp_fup)]
last_fup <- cont[cont$ID == id & cont$`Date of follow up visit or phone call:` == tmp_fup,]$`Event Name`
df <- rbind(df, list(id,last_fup))
}
ids <- laarni$Study.ID[laarni$Study.ID != ""]
df <- data.frame()
for (id in ids){
tmp_fup <- cont[cont$ID == id, "Date of follow up visit or phone call:"]
tmp_fup <- tmp_fup[tmp_fup != ""]
tmp_fup <- tmp_fup[length(tmp_fup)]
last_fup <- cont[cont$ID == id & cont$`Date of follow up visit or phone call:` == tmp_fup,]$`Event Name`
df <- rbind(df, as.list(id,last_fup))
}
View(df)
ids <- laarni$Study.ID[laarni$Study.ID != ""]
df <- data.frame()
for (id in ids){
tmp_fup <- cont[cont$ID == id, "Date of follow up visit or phone call:"]
tmp_fup <- tmp_fup[tmp_fup != ""]
tmp_fup <- tmp_fup[length(tmp_fup)]
last_fup <- cont[cont$ID == id & cont$`Date of follow up visit or phone call:` == tmp_fup,]$`Event Name`
df <- rbind(df, c(id,last_fup))
}
colnames(df) <- c("ID", "FollowUp")
write.table(df, "~/Desktop/KCK_follow_ups.csv", sep = ",", quote = F, row.names = F)
